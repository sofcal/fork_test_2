db.Organisation.aggregate([
{ $unwind: { path: '$products', preserveNullAndEmptyArrays: false } },
{ $lookup: { from: 'Product', localField: 'products.productId', foreignField: '_id', as: 'prod'}},
{ $lookup: { from: 'Rule', localField: '_id', foreignField: 'organisationId', as: 'rulesLookup'}},
{ $unwind: { path: '$rulesLookup', preserveNullAndEmptyArrays: false } },
{ $unwind: { path: '$rulesLookup.rules', preserveNullAndEmptyArrays: false } },
{
        $project: {
            _id: '$products.productId',
            productName: '$prod.name',
            numberOfOrg: '$_id',
            numberOfBankAccounts: '$rulesLookup.bankAccountId',
            numberOfRules: '$rulesLookup.rules.uuid'
        }
    }, {
        $group: {
            _id: '$_id',
            productName: { $first: '$productName' },
            numberOfOrg: { $addToSet: '$numberOfOrg' },
            numberOfBankAccounts: { $addToSet: '$numberOfBankAccounts' },
            numberOfRules: { $addToSet: '$numberOfRules' },
        }
    },
{ $unwind: { path: '$productName', preserveNullAndEmptyArrays: false } },
{
        $project: {
            _id: 1,
            productName: 1,
            numberOfOrg: { $cond: [{ $not: ['$numberOfOrg'] }, 0, { $size: '$numberOfOrg'}] },
            numberOfBankAccounts: { $cond: [{ $not: ['$numberOfBankAccounts'] }, 0, { $size: '$numberOfBankAccounts'}] },
            numberOfRules: { $cond: [{ $not: ['$numberOfRules'] }, 0, { $size: '$numberOfRules'}] }
        }
    },
],{
allowDiskUse: true
})